[package]
name = "rapidstore-inspired-engine"
version = "0.1.0"
edition = "2021"
authors = ["Research Team <research@example.com>"]
description = "Ultra-fast knowledge graph database based on 2025 research insights from RapidStore, IndraDB, and Kuzu optimizations"
license = "MIT"
repository = "https://github.com/research/rapidstore-inspired-engine"
keywords = ["graph", "database", "knowledge-graph", "research", "2025-benchmarks"]
categories = ["database", "data-structures", "algorithms", "science"]

[dependencies]
# Core performance dependencies based on 2025 research
rayon = "1.8"                    # Parallel processing (IndraDB inspired)
crossbeam = "0.8"               # Lock-free data structures (RapidStore inspired)
parking_lot = "0.12"            # Fast synchronization primitives
ahash = "0.8"                   # Fast hashing (benchmarked best in 2025)
dashmap = "5.5"                 # Concurrent hash map for decoupled operations
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"                 # Ultra-fast binary serialization
memmap2 = "0.9"                 # Memory-mapped files (Kuzu inspired)
zstd = "0.13"                   # Compression for storage efficiency
lz4_flex = "0.11"              # Ultra-fast compression

# Advanced SIMD and low-level optimizations (2025 research focus)
bytemuck = "1.14"              # Safe transmutes for SIMD operations
wide = "0.7"                   # SIMD utilities and vectorization
target-lexicon = "0.12"        # CPU feature detection for optimization dispatch

# Async runtime and networking (RapidStore decoupled architecture)
tokio = { version = "1.0", features = ["full"] }
tokio-util = "0.7"
futures = "0.3"
async-trait = "0.1"

# Distributed computing (infinite scalability)
mpi = { version = "0.7", optional = true }
rdkafka = { version = "0.36", optional = true }

# GPU computing based on cuGraph research
cudarc = { version = "0.10", optional = true }
candle = { version = "0.4", optional = true }

# Storage backends (multi-backend approach like IndraDB)
rocksdb = { version = "0.22", optional = true }
sled = { version = "0.34", optional = true }
redb = { version = "1.5", optional = true }

# Advanced monitoring and metrics (research-grade profiling)
prometheus = "0.13"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
pprof = { version = "0.13", features = ["criterion", "flamegraph"], optional = true }

# CLI and configuration
clap = { version = "4.4", features = ["derive"] }
config = "0.13"
anyhow = "1.0"
thiserror = "1.0"

# FFI for C++/Fortran integration (critical for performance)
cxx = "1.0"
libc = "0.2"

# Numerical computing (Fortran integration for embeddings)
ndarray = "0.15"
blas-src = { version = "0.8", features = ["openblas"], optional = true }
lapack-src = { version = "0.8", features = ["openblas"], optional = true }

# Advanced concurrency and atomics (RapidStore inspired)
atomic = "0.6"
flume = "0.11"                 # MPSC channels for decoupled operations
once_cell = "1.19"
arc-swap = "1.6"               # Lock-free atomic swapping

# Memory optimization and profiling
jemalloc-ctl = { version = "0.5", optional = true }
tikv-jemallocator = { version = "0.5", optional = true }

# Graph-specific dependencies
petgraph = { version = "0.6", optional = true }  # For algorithm references
graph = { version = "0.7", optional = true }     # Alternative graph structures

[build-dependencies]
cxx-build = "1.0"
cc = "1.0"
bindgen = "0.69"               # For C++ FFI generation

[dev-dependencies]
# Advanced benchmarking suite (2025 research standards)
criterion = { version = "0.5", features = ["html_reports", "csv_output"] }
criterion-perf-events = "0.4"
criterion-cycles-per-byte = "0.6"
pprof = { version = "0.13", features = ["criterion", "flamegraph"] }

# Testing utilities
proptest = "1.4"
tempfile = "3.8"
pretty_assertions = "1.4"
quickcheck = "1.0"

# Performance analysis tools
flame = "0.2"
flamer = "0.5"

[features]
default = ["rocksdb-backend", "compression", "simd"]

# Storage backends (multi-backend like IndraDB)
rocksdb-backend = ["rocksdb"]
sled-backend = ["sled"]
redb-backend = ["redb"]

# Performance features (2025 research focus)
simd = []                      # SIMD optimizations with AVX-512
gpu = ["cudarc", "candle"]     # GPU acceleration via cuGraph
assembly = []                  # Hand-optimized Assembly hot paths
fortran = ["blas-src", "lapack-src"]  # Fortran integration for numerics

# Distributed features (infinite scalability)
distributed = ["mpi"]
streaming = ["rdkafka"]

# Storage and compression
compression = []
memory-profiling = ["jemalloc-ctl", "tikv-jemallocator"]

# Development and research features
profiling = ["pprof"]
graph-reference = ["petgraph", "graph"]
full-optimization = ["simd", "assembly", "gpu", "fortran", "compression", "distributed"]

[profile.release]
# Maximum optimization based on 2025 research benchmarks
opt-level = 3
lto = "fat"                    # Link-time optimization for cross-module optimizations
codegen-units = 1              # Single codegen unit for maximum optimization
panic = "abort"                # Smaller binary, faster execution
debug = false
overflow-checks = false        # Remove bounds checking in release
incremental = false            # Better optimization without incremental compilation

[profile.bench]
# Optimizations for accurate benchmarking
opt-level = 3
lto = "fat"
codegen-units = 1
debug = true                   # Keep debug info for profiling
overflow-checks = false

[profile.dev]
# Fast compilation for development
opt-level = 1
debug = true

[[bench]]
name = "rapidstore_benchmarks"
harness = false

[[bench]]
name = "decoupled_operations"
harness = false

[[bench]]
name = "simd_optimizations"
harness = false

[[bench]]
name = "gpu_acceleration"
harness = false

[[bench]]
name = "billion_scale_stress"
harness = false

[[example]]
name = "basic_usage"
path = "examples/basic_usage.rs"

[[example]]
name = "billion_scale_demo"
path = "examples/billion_scale_demo.rs"

[[example]]
name = "decoupled_architecture"
path = "examples/decoupled_architecture.rs"

[[example]]
name = "gpu_acceleration_demo"
path = "examples/gpu_acceleration_demo.rs"

[[example]]
name = "research_benchmarks"
path = "examples/research_benchmarks.rs"

[[bin]]
name = "rapidstore-server"
path = "src/bin/server.rs"

[[bin]]
name = "rapidstore-cli"
path = "src/bin/cli.rs"

[[bin]]
name = "rapidstore-benchmark"
path = "src/bin/benchmark.rs"

# Documentation settings
[package.metadata.docs.rs]
features = ["full-optimization"]
rustdoc-args = ["--cfg", "docsrs"]