[package]
name = "ultra-fast-kg-2025"
version = "1.0.0"
edition = "2021"
authors = ["Ultra-Fast Knowledge Graph Team 2025"]
license = "MIT"
description = "The fastest knowledge graph database ever built - 2025 edition with latest research optimizations"
repository = "https://github.com/igor-kan/advanced-knowledge-base"
keywords = ["graph", "database", "performance", "distributed", "2025-research"]
categories = ["database", "algorithms", "data-structures", "science", "mathematics"]

[lib]
name = "ultra_fast_kg_2025"
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "kg-server-2025"
path = "src/bin/server.rs"

[[bin]]
name = "kg-benchmark-2025" 
path = "src/bin/benchmark.rs"

[[bin]]
name = "kg-distributed-2025"
path = "src/bin/distributed.rs"

[dependencies]
# Core performance libraries (latest 2025 versions)
tokio = { version = "1.40", features = ["full", "tracing"] }
rayon = "1.10"
crossbeam = "0.8.4"
parking_lot = "0.12.3"
dashmap = "6.0"
ahash = "0.8.11"
smallvec = "1.13"
tinyvec = "1.8"
once_cell = "1.20"
thiserror = "1.0.63"
anyhow = "1.0.86"

# Advanced data structures for 2025 performance
sled = "0.34.7"
rocksdb = { version = "0.22", features = ["multi-threaded-cf"] }
moka = { version = "0.12", features = ["future"] }
flurry = "0.5"
lockfree = "0.5"
atomic = "0.6"

# Serialization optimized for speed
serde = { version = "1.0.208", features = ["derive", "rc"] }
serde_json = "1.0.125"
bincode = "1.3.3"
rmp-serde = "1.3"
postcard = { version = "1.0", features = ["alloc"] }
zerocopy = { version = "0.7", features = ["derive"] }

# Latest memory management optimizations
mimalloc = { version = "0.1.43", default-features = false, features = ["secure"] }
jemalloc-ctl = "0.5.4"
tikv-jemalloc-sys = { version = "0.6", features = ["profiling"] }

# Advanced SIMD and low-level optimizations (2025)
wide = "0.7.28"
bytemuck = { version = "1.17", features = ["derive", "extern_crate_alloc"] }
memchr = "2.7"
bstr = { version = "1.10", features = ["serde"] }
simd-json = "0.13"
portable-simd = "0.3"

# Network and async optimizations
hyper = { version = "1.4", features = ["full", "http1", "http2"] }
axum = { version = "0.7.5", features = ["multipart", "ws", "macros"] }
tower = { version = "0.4.13", features = ["full"] }
tower-http = { version = "0.5.2", features = ["full"] }
tonic = { version = "0.12", features = ["gzip", "tls"] }
prost = "0.13"

# I/O and compression optimizations
lz4 = "1.24.1"
zstd = { version = "0.13.2", features = ["arrays", "experimental"] }
memmap2 = "0.9.4"
async-std = { version = "1.12", features = ["attributes"] }

# Advanced metrics and observability (2025)
prometheus = { version = "0.13.4", features = ["process"] }
tracing = { version = "0.1.40", features = ["max_level_trace"] }
tracing-subscriber = { version = "0.3.18", features = ["env-filter", "json"] }
opentelemetry = { version = "0.24", features = ["metrics", "trace"] }

# Mathematical and scientific computing
nalgebra = { version = "0.33", features = ["serde-serialize", "rayon"] }
ndarray = { version = "0.16", features = ["blas", "rayon", "serde"] }
statrs = "0.17"
faer = { version = "0.19", features = ["serde"] }
sprs = { version = "0.11", features = ["serde"] }

# Graph processing foundations (2025 versions)
petgraph = { version = "0.6.5", features = ["serde-1"] }
indradb = { version = "4.1", features = ["rocksdb-datastore", "test-suite"] }

# Advanced ML and AI integration
tch = { version = "0.17", features = ["download-libtorch"] }
candle-core = { version = "0.7", features = ["cuda"] }
candle-nn = "0.7"
ort = { version = "2.0", features = ["cuda", "tensorrt"] }

# Distributed computing and clustering
mpi = { version = "0.8", optional = true }
rdkafka = { version = "0.36", features = ["ssl", "sasl"] }
etcd-rs = "2.0"
consul = "0.4"

# Development and testing
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports", "csv_output"] }
proptest = "1.5"
quickcheck = "1.0.3"
pretty_assertions = "1.4.0"
tempfile = "3.12"
pprof = { version = "0.13", features = ["flamegraph", "protobuf-codec"] }

[build-dependencies]
cc = { version = "1.1", features = ["parallel"] }
bindgen = { version = "0.70", features = ["runtime"] }
pkg-config = "0.3.30"
cmake = "0.1.51"

[features]
default = ["optimized", "simd", "jemalloc"]

# Performance optimization features
optimized = []
simd = ["wide", "portable-simd"]  
jemalloc = ["tikv-jemalloc-sys/profiling"]
avx512 = []
assembly-hotpaths = []

# Storage backends
sled-backend = ["sled"]
rocksdb-backend = ["rocksdb"]
memory-backend = []

# Distributed computing
distributed = ["mpi", "rdkafka", "etcd-rs"]
mpi-backend = ["mpi"]
clustering = ["consul", "etcd-rs"]

# AI/ML integration
ml-integration = ["tch", "candle-core", "ort"]
cuda-acceleration = ["tch/cuda", "candle-core/cuda"]

# Development features
profiling = ["pprof"]
benchmarking = ["criterion"]
testing = ["proptest", "quickcheck"]

[profile.release]
# Maximum optimization for 2025 performance
opt-level = 3
debug = false
strip = true
lto = "fat"
codegen-units = 1
panic = "abort"
overflow-checks = false

# Enable target-specific optimizations
[profile.release.build-override]
opt-level = 3
codegen-units = 1

# Ultra-high-performance profile for benchmarks
[profile.ultra]
inherits = "release"
opt-level = "z"
lto = "fat"
codegen-units = 1

# Research and development profile
[profile.research]
opt-level = 3
debug = true
lto = "thin"
codegen-units = 16
overflow-checks = false

# Compiler optimizations for maximum speed
[package.metadata.docs.rs]
features = ["optimized", "simd", "distributed"]
rustdoc-args = ["--cfg", "docsrs"]

# Target-specific optimizations
[target.'cfg(target_arch = "x86_64")'.dependencies]
raw-cpuid = "11.1"

[target.'cfg(target_os = "linux")'.dependencies]
libc = "0.2"
nix = { version = "0.29", features = ["process", "signal"] }

[target.'cfg(target_os = "windows")'.dependencies]
winapi = { version = "0.3", features = ["processthreadsapi", "memoryapi", "sysinfoapi"] }

# Benchmarking configurations
[[bench]]
name = "graph_operations_2025"
harness = false
required-features = ["benchmarking"]

[[bench]]
name = "distributed_performance" 
harness = false
required-features = ["distributed", "benchmarking"]

[[bench]]
name = "memory_optimization"
harness = false
required-features = ["jemalloc", "benchmarking"]

[[bench]]
name = "simd_operations"
harness = false
required-features = ["simd", "benchmarking"]

# Examples demonstrating 2025 capabilities
[[example]]
name = "infinite_scale_demo"
path = "examples/infinite_scale.rs"
required-features = ["distributed"]

[[example]]
name = "177x_speedup_demo"
path = "examples/speedup_benchmark.rs"
required-features = ["optimized", "simd"]

[[example]]
name = "fortran_integration"
path = "examples/fortran_math.rs"

[[example]]
name = "assembly_hotpaths"
path = "examples/assembly_optimization.rs"
required-features = ["assembly-hotpaths"]

# Platform-specific build configuration
[package.metadata.build]
# Enable all CPU features for maximum performance
target-cpu = "native"
target-features = ["+avx512f", "+avx512dq", "+avx512cd", "+avx512bw", "+avx512vl"]

# Custom build flags for different backends
[package.metadata.build.cpp]
flags = ["-O3", "-march=native", "-mavx512f", "-ffast-math", "-funroll-loops"]
include_dirs = ["src/cpp", "/usr/local/include"]
lib_dirs = ["/usr/local/lib"]

[package.metadata.build.fortran]
flags = ["-O3", "-march=native", "-ffast-math", "-funroll-loops", "-fopenmp"]
compiler = "gfortran"

# Security and audit configuration
[package.metadata.audit]
ignore = []  # No known vulnerabilities to ignore

# Licensing and legal
[package.metadata.license]
license-file = "LICENSE"
copyright = "2025 Ultra-Fast Knowledge Graph Team"