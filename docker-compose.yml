version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: knowledge-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/knowledge123
      - NEO4J_PLUGINS=["apoc", "gds"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial_size=2G
      - NEO4J_dbms_memory_heap_max_size=4G
      - NEO4J_dbms_memory_pagecache_size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "knowledge123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis with RedisGraph module
  redis-graph:
    image: redislabs/redisgraph:latest
    container_name: knowledge-redis-graph
    ports:
      - "6379:6379"
    command: redis-server --loadmodule /usr/lib/redis/modules/redisgraph.so
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Jena Fuseki (RDF Triple Store)
  fuseki:
    image: stain/jena-fuseki:latest
    container_name: knowledge-fuseki
    ports:
      - "3030:3030"
    environment:
      - ADMIN_PASSWORD=knowledge123
      - JVM_ARGS=-Xmx4g
    volumes:
      - fuseki_data:/fuseki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/$/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch for full-text search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: knowledge-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cassandra for distributed storage
  cassandra:
    image: cassandra:4.1
    container_name: knowledge-cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=KnowledgeCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=datacenter1
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=400M
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for document storage
  mongodb:
    image: mongo:7.0
    container_name: knowledge-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=knowledge123
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for relational data
  postgres:
    image: postgres:16
    container_name: knowledge-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=knowledge
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=knowledge123
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: knowledge-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: knowledge-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: knowledge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: knowledge-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=knowledge123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: knowledge-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Main Knowledge Base API
  knowledge-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: knowledge-api
    ports:
      - "8080:8080"  # REST API
      - "8081:8081"  # GraphQL API
      - "8082:8082"  # WebSocket API
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=knowledge123
      - REDIS_URL=redis://redis-graph:6379
      - FUSEKI_URL=http://fuseki:3030
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - CASSANDRA_HOSTS=cassandra:9042
      - MONGODB_URL=mongodb://admin:knowledge123@mongodb:27017
      - POSTGRES_URL=postgresql://postgres:knowledge123@postgres:5432/knowledge
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - neo4j
      - redis-graph
      - fuseki
      - elasticsearch
      - cassandra
      - mongodb
      - postgres
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  fuseki_data:
  elasticsearch_data:
  cassandra_data:
  mongodb_data:
  postgres_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: knowledge-network